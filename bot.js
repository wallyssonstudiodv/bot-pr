const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const readline = require('readline');
const fs = require('fs');
const cron = require('node-cron');
const axios = require('axios');
const chalk = require('chalk');

class YouTubeWhatsAppBot {
    constructor() {
        this.client = null;
        this.isConnected = false;
        this.isConnecting = false;
        this.groups = new Map();
        this.schedules = new Map();
        this.youtubeApiKey = "AIzaSyDubEpb0TkgZjiyjA9-1QM_56Kwnn_SMPs";
        this.channelId = "UCh-ceOeY4WVgS8R0onTaXmw";
        this.dataFile = './bot_data.json';
        this.lastVideoId = null;
        this.autoScheduleEnabled = false;
        
        // Interface do terminal
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        this.loadData();
        this.showWelcome();
        this.setupCommands();
        this.initializeClient();
    }

    // Mostra boas-vindas
    showWelcome() {
        console.clear();
        console.log(chalk.cyan('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(chalk.cyan('‚ïë                 üöÄ DISPARADOR CANAL PR MARCELO OLIVEIRA                  ‚ïë'));
        console.log(chalk.cyan('‚ïë                                                                          ‚ïë'));
        console.log(chalk.yellow('‚ïë                     Criado por: WALLYSSON STUDIO DV 2025                ‚ïë'));
        console.log(chalk.cyan('‚ïë                                                                          ‚ïë'));
        console.log(chalk.cyan('‚ïë         Automatize o envio de novos v√≠deos do Pastor Marcelo            ‚ïë'));
        console.log(chalk.cyan('‚ïë                  para seus grupos do WhatsApp!                          ‚ïë'));
        console.log(chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
        console.log(chalk.green('\nüöÄ Disparador iniciado com sucesso!'));
        console.log(chalk.gray('Digite "menu" para ver todas as op√ß√µes dispon√≠veis.\n'));
    }

    // Inicializa o cliente WhatsApp
    initializeClient() {
        this.client = new Client({
            authStrategy: new LocalAuth({
                clientId: "youtube-bot"
            }),
            puppeteer: {
                headless: true,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--single-process',
                    '--disable-gpu'
                ]
            }
        });

        this.setupClientEvents();
    }

    // Configura eventos do cliente
    setupClientEvents() {
        this.client.on('qr', (qr) => {
            console.log(chalk.yellow('\nüì± C√ìDIGO QR GERADO!'));
            console.log(chalk.white('Abra o WhatsApp no seu celular e escaneie o c√≥digo abaixo:\n'));
            qrcode.generate(qr, { small: true });
            console.log(chalk.gray('\nAguardando conex√£o...\n'));
        });

        this.client.on('ready', async () => {
            this.isConnected = true;
            this.isConnecting = false;
            console.log(chalk.green('\n‚úÖ CONECTADO COM SUCESSO!'));
            console.log(chalk.green('WhatsApp Web est√° pronto para uso!\n'));
            await this.loadGroups();
            this.setupAutoSchedule();
            this.showPrompt();
        });

        this.client.on('authenticated', () => {
            console.log(chalk.blue('üîê Autentica√ß√£o realizada com sucesso!'));
        });

        this.client.on('auth_failure', (msg) => {
            this.isConnecting = false;
            console.log(chalk.red('\n‚ùå ERRO DE AUTENTICA√á√ÉO!'));
            console.log(chalk.red('Motivo:', msg));
            console.log(chalk.yellow('üí° Dica: Use o comando "limpar" para resetar a sess√£o\n'));
            this.showPrompt();
        });

        this.client.on('disconnected', (reason) => {
            this.isConnected = false;
            this.isConnecting = false;
            console.log(chalk.red('\n‚ùå DESCONECTADO!'));
            console.log(chalk.red('Motivo:', reason));
            console.log(chalk.yellow('üí° Use o comando "conectar" para reconectar\n'));
            this.showPrompt();
        });

        this.client.on('message_create', async (message) => {
            // Responder a comandos diretos nos grupos
            if (message.fromMe) return;
            
            if (message.body === '!status' && message.from.includes('@g.us')) {
                const chat = await message.getChat();
                if (chat.isGroup) {
                    const groupInfo = this.groups.get(chat.id._serialized);
                    const status = groupInfo?.active ? 'üü¢ ATIVO' : 'üî¥ INATIVO';
                    const autoStatus = this.autoScheduleEnabled ? 'üü¢ ATIVADO' : 'üî¥ DESATIVADO';
                    message.reply(`ü§ñ Disparador Status: ${status}\nüìã Grupo: ${chat.name}\n‚è∞ Envio Autom√°tico: ${autoStatus}\nüïí Hor√°rios: 08:00, 12:00, 18:00\n\n‚ú® Wallysson Studio DV 2025`);
                }
            }
        });
    }

    // Configura agendamento autom√°tico para 8h, 12h e 18h
    setupAutoSchedule() {
        if (this.autoScheduleEnabled) {
            console.log(chalk.green('‚è∞ Agendamento autom√°tico j√° est√° ativo!'));
            return;
        }

        try {
            // Agendamento para 8:00
            const morning = cron.schedule('0 8 * * *', () => {
                console.log(chalk.blue('\n‚è∞ VERIFICA√á√ÉO AUTOM√ÅTICA - 08:00'));
                console.log(chalk.gray('üìÖ ' + new Date().toLocaleString()));
                this.checkAndSendNewVideos();
            });

            // Agendamento para 12:00
            const noon = cron.schedule('0 12 * * *', () => {
                console.log(chalk.blue('\n‚è∞ VERIFICA√á√ÉO AUTOM√ÅTICA - 12:00'));
                console.log(chalk.gray('üìÖ ' + new Date().toLocaleString()));
                this.checkAndSendNewVideos();
            });

            // Agendamento para 18:00
            const evening = cron.schedule('0 18 * * *', () => {
                console.log(chalk.blue('\n‚è∞ VERIFICA√á√ÉO AUTOM√ÅTICA - 18:00'));
                console.log(chalk.gray('üìÖ ' + new Date().toLocaleString()));
                this.checkAndSendNewVideos();
            });

            // Salva os agendamentos
            this.schedules.set('auto_08h', {
                cron: '0 8 * * *',
                task: morning,
                created: new Date().toISOString(),
                type: 'auto',
                description: 'Envio autom√°tico - 08:00'
            });

            this.schedules.set('auto_12h', {
                cron: '0 12 * * *',
                task: noon,
                created: new Date().toISOString(),
                type: 'auto',
                description: 'Envio autom√°tico - 12:00'
            });

            this.schedules.set('auto_18h', {
                cron: '0 18 * * *',
                task: evening,
                created: new Date().toISOString(),
                type: 'auto',
                description: 'Envio autom√°tico - 18:00'
            });

            this.autoScheduleEnabled = true;
            this.saveData();

            console.log(chalk.green('\n‚úÖ AGENDAMENTO AUTOM√ÅTICO CONFIGURADO!'));
            console.log(chalk.white('üï∞Ô∏è  Hor√°rios programados:'));
            console.log(chalk.yellow('    ‚Ä¢ 08:00 - Verifica√ß√£o matinal'));
            console.log(chalk.yellow('    ‚Ä¢ 12:00 - Verifica√ß√£o do meio-dia'));
            console.log(chalk.yellow('    ‚Ä¢ 18:00 - Verifica√ß√£o noturna'));
            console.log(chalk.green('ü§ñ O bot verificar√° automaticamente novos v√≠deos nesses hor√°rios!'));

        } catch (error) {
            console.log(chalk.red('‚ùå Erro ao configurar agendamentos autom√°ticos:', error.message));
        }
    }

    // Desativa agendamento autom√°tico
    disableAutoSchedule() {
        const autoScheduleIds = ['auto_08h', 'auto_12h', 'auto_18h'];
        
        for (const id of autoScheduleIds) {
            const schedule = this.schedules.get(id);
            if (schedule && schedule.task) {
                schedule.task.stop();
                this.schedules.delete(id);
            }
        }

        this.autoScheduleEnabled = false;
        this.saveData();

        console.log(chalk.yellow('üî¥ Agendamento autom√°tico DESATIVADO!'));
        console.log(chalk.gray('üí° Use "auto-ativar" para reativar.'));
    }

    // Carrega dados salvos
    loadData() {
        try {
            if (fs.existsSync(this.dataFile)) {
                const data = JSON.parse(fs.readFileSync(this.dataFile, 'utf8'));
                this.schedules = new Map(data.schedules || []);
                this.lastVideoId = data.lastVideoId || null;
                this.autoScheduleEnabled = data.autoScheduleEnabled || false;
                
                // Recriar os cron jobs
                for (const [id, scheduleData] of this.schedules) {
                    this.recreateSchedule(id, scheduleData);
                }
                
                console.log(chalk.green('üìä Configura√ß√µes carregadas!'));
            }
        } catch (error) {
            console.log(chalk.red('‚ö†Ô∏è Erro ao carregar configura√ß√µes:', error.message));
        }
    }

    // Recria agendamento ap√≥s carregar dados
    recreateSchedule(id, scheduleData) {
        try {
            const task = cron.schedule(scheduleData.cron, () => {
                console.log(chalk.blue(`\n‚è∞ ${scheduleData.description || 'VERIFICA√á√ÉO AUTOM√ÅTICA'}`));
                console.log(chalk.gray('üìÖ ' + new Date().toLocaleString()));
                this.checkAndSendNewVideos();
            }, {
                scheduled: false
            });

            this.schedules.set(id, {
                ...scheduleData,
                task: task
            });

            task.start();
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro ao restaurar agendamento ${id}:`, error.message));
            this.schedules.delete(id);
        }
    }

    // Salva dados
    saveData() {
        try {
            const schedulesToSave = new Map();
            for (const [id, schedule] of this.schedules) {
                schedulesToSave.set(id, {
                    cron: schedule.cron,
                    created: schedule.created,
                    type: schedule.type || 'manual',
                    description: schedule.description || ''
                });
            }

            const data = {
                schedules: Array.from(schedulesToSave),
                lastVideoId: this.lastVideoId,
                autoScheduleEnabled: this.autoScheduleEnabled
            };
            fs.writeFileSync(this.dataFile, JSON.stringify(data, null, 2));
        } catch (error) {
            console.log(chalk.red('‚ö†Ô∏è Erro ao salvar configura√ß√µes:', error.message));
        }
    }

    // Conecta ao WhatsApp
    async connect() {
        if (this.isConnected) {
            console.log(chalk.green('‚úÖ J√° est√° conectado ao WhatsApp!'));
            return;
        }

        if (this.isConnecting) {
            console.log(chalk.yellow('‚è≥ Conex√£o em andamento, aguarde...'));
            return;
        }

        this.isConnecting = true;
        console.log(chalk.blue('\nüîó Iniciando conex√£o com WhatsApp...'));
        console.log(chalk.gray('Aguarde o c√≥digo QR aparecer...\n'));

        try {
            await this.client.initialize();
        } catch (error) {
            this.isConnecting = false;
            console.log(chalk.red('‚ùå Erro na conex√£o:', error.message));
            this.showPrompt();
        }
    }

    // Carrega grupos
    async loadGroups() {
        try {
            const chats = await this.client.getChats();
            this.groups.clear();
            
            let groupCount = 0;
            for (const chat of chats) {
                if (chat.isGroup) {
                    this.groups.set(chat.id._serialized, {
                        name: chat.name,
                        active: false,
                        chat: chat
                    });
                    groupCount++;
                }
            }
            
            console.log(chalk.green(`üìã ${groupCount} grupos encontrados e carregados!`));
        } catch (error) {
            console.log(chalk.red('‚ùå Erro ao carregar grupos:', error.message));
        }
    }

    // Busca o √∫ltimo v√≠deo do canal
    async getLatestVideo() {
        try {
            const url = `https://www.googleapis.com/youtube/v3/search?key=${this.youtubeApiKey}&channelId=${this.channelId}&order=date&part=snippet&type=video&maxResults=1`;
            const response = await axios.get(url);
            
            if (response.data.items && response.data.items.length > 0) {
                const video = response.data.items[0];
                const videoId = video.id.videoId;
                const title = video.snippet.title;
                const thumbnail = video.snippet.thumbnails.high.url;
                const link = `https://www.youtube.com/watch?v=${videoId}`;

                return {
                    videoId,
                    title,
                    thumbnail,
                    link,
                    isNew: videoId !== this.lastVideoId
                };
            }
            return null;
        } catch (error) {
            console.log(chalk.red('‚ùå Erro ao buscar v√≠deo no YouTube:', error.message));
            return null;
        }
    }

    // Envia mensagem com v√≠deo para um grupo
    async sendVideoToGroup(groupId, videoData) {
        if (!this.client || !this.isConnected) {
            console.log(chalk.red('‚ùå WhatsApp n√£o est√° conectado!'));
            return false;
        }

        try {
            const group = this.groups.get(groupId);
            if (!group) {
                console.log(chalk.red(`‚ùå Grupo n√£o encontrado!`));
                return false;
            }

            const message = `üö® *V√çDEO NOVO DO PR MARCELO OLIVEIRA!*\n\nüé¨ *${videoData.title}*\n\nüëâ *Assista agora:* ${videoData.link}\n\nüôè Compartilhe com fam√≠lia e amigos!\n\n‚ú® *Deus aben√ßoe!*\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
            
            // Envia a mensagem de texto
            await this.client.sendMessage(groupId, message);
            

            return true;
        } catch (error) {
            console.log(chalk.red(`‚ùå Erro ao enviar mensagem:`, error.message));
            return false;
        }
    }

    // Verifica novos v√≠deos e envia
    async checkAndSendNewVideos(forceCheck = false) {
        if (!this.isConnected) {
            console.log(chalk.red('‚ùå WhatsApp n√£o est√° conectado!'));
            return;
        }

        console.log(chalk.blue('üîç Verificando novos v√≠deos no YouTube...'));
        
        const videoData = await this.getLatestVideo();
        if (!videoData) {
            console.log(chalk.yellow('‚ö†Ô∏è Nenhum v√≠deo encontrado no canal'));
            return;
        }

        if (videoData.isNew || forceCheck) {
            if (forceCheck && !videoData.isNew) {
                console.log(chalk.blue(`üîÑ ENVIO MANUAL FOR√áADO!`));
                console.log(chalk.white(`üì∫ Reenviando: ${videoData.title}`));
            } else {
                console.log(chalk.green(`üÜï NOVO V√çDEO ENCONTRADO!`));
                console.log(chalk.white(`üì∫ T√≠tulo: ${videoData.title}`));
                this.lastVideoId = videoData.videoId;
                this.saveData();
            }

            // Envia para todos os grupos ativos
            const activeGroups = Array.from(this.groups.entries()).filter(([id, data]) => data.active);
            
            if (activeGroups.length === 0) {
                console.log(chalk.yellow('‚ö†Ô∏è Nenhum grupo ativo! Use "ativar" para ativar grupos.'));
                return;
            }

            console.log(chalk.blue(`üì§ Enviando para ${activeGroups.length} grupos...`));
            let sentCount = 0;
            
            for (const [groupId, groupData] of activeGroups) {
                console.log(chalk.gray(`  üì§ Enviando para: ${groupData.name}`));
                const success = await this.sendVideoToGroup(groupId, videoData);
                if (success) {
                    sentCount++;
                    console.log(chalk.green(`  ‚úÖ Enviado com sucesso!`));
                } else {
                    console.log(chalk.red(`  ‚ùå Falha no envio!`));
                }
                await this.delay(3000); // Delay de 3 segundos entre envios
            }
            
            console.log(chalk.green(`\nüéâ SUCESSO! V√≠deo enviado para ${sentCount}/${activeGroups.length} grupos!`));
        } else {
            console.log(chalk.gray('üì∫ Nenhum v√≠deo novo encontrado (j√° foi enviado)'));
        }
    }

    // Envio manual for√ßado (mesmo que j√° tenha sido enviado)
    async forceManualSend() {
        if (!this.isConnected) {
            console.log(chalk.red('‚ùå WhatsApp n√£o est√° conectado!'));
            return;
        }

        console.log(chalk.blue('\nüöÄ ENVIO MANUAL INICIADO'));
        console.log(chalk.yellow('‚ö†Ô∏è  Este comando enviar√° o √∫ltimo v√≠deo mesmo que j√° tenha sido enviado antes.'));
        
        this.rl.question(chalk.cyan('\n‚ùì Confirma o envio manual? (s/N): '), async (answer) => {
            if (answer.toLowerCase() === 's' || answer.toLowerCase() === 'sim') {
                await this.checkAndSendNewVideos(true);
            } else {
                console.log(chalk.gray('‚ùå Envio manual cancelado.'));
            }
            this.showPrompt();
        });
        return;
    }

    // Delay helper
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Configura comandos do terminal
    setupCommands() {
        this.rl.on('line', async (input) => {
            const [command, ...args] = input.trim().split(' ');
            
            switch (command.toLowerCase()) {
                case 'menu':
                case 'ajuda':
                case 'help':
                    this.showMenu();
                    break;
                case 'conectar':
                case '1':
                    await this.connect();
                    break;
                case 'desconectar':
                case '2':
                    this.disconnect();
                    break;
                case 'status':
                case '3':
                    this.showStatus();
                    break;
                case 'grupos':
                case '4':
                    this.listGroups();
                    break;
                case 'ativar':
                case '5':
                    this.activateGroup(args.join(' '));
                    break;
                case 'desativar':
                case '6':
                    this.deactivateGroup(args.join(' '));
                    break;
                case 'verificar':
                case '7':
                    await this.checkAndSendNewVideos();
                    break;
                case 'enviar-manual':
                case 'manual':
                case '8':
                    await this.forceManualSend();
                    break;
                case 'auto-ativar':
                case '9':
                    this.setupAutoSchedule();
                    break;
                case 'auto-desativar':
                case '10':
                    this.disableAutoSchedule();
                    break;
                case 'agendar':
                case '11':
                    this.scheduleMenu();
                    break;
                case 'agendamentos':
                case '12':
                    this.listSchedules();
                    break;
                case 'testar':
                case '13':
                    await this.testVideo();
                    break;
                case 'limpar':
                case '14':
                    this.cleanSession();
                    break;
                case 'reiniciar':
                case '15':
                    await this.restart();
                    break;
                case 'cls':
                case 'clear':
                case 'limpatela':
                    this.clearScreen();
                    break;
                case 'sair':
                case 'exit':
                case '0':
                    this.exit();
                    break;
                case 'creditos':
                    this.showCredits();
                    break;
                case 'remover':
                    this.removeSchedule(args[0]);
                    break;
                default:
                    if (command.trim() !== '') {
                        console.log(chalk.red('‚ùå Comando n√£o encontrado!'));
                        console.log(chalk.yellow('üí° Digite "menu" para ver todos os comandos dispon√≠veis.'));
                    }
            }
            
            this.showPrompt();
        });

        this.showPrompt();
    }

    // Mostra menu principal
    showMenu() {
        console.log(chalk.cyan('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(chalk.cyan('‚ïë                           üìã MENU PRINCIPAL                              ‚ïë'));
        console.log(chalk.yellow('‚ïë                    üöÄ DISPARADOR PR MARCELO OLIVEIRA                     ‚ïë'));
        console.log(chalk.cyan('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.white('‚ïë  üîó CONEX√ÉO:                                                             ‚ïë'));
        console.log(chalk.yellow('‚ïë    1. conectar         - Conectar ao WhatsApp                           ‚ïë'));
        console.log(chalk.yellow('‚ïë    2. desconectar      - Desconectar do WhatsApp                        ‚ïë'));
        console.log(chalk.yellow('‚ïë    3. status           - Ver status da conex√£o                          ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.white('‚ïë  üìã GRUPOS:                                                              ‚ïë'));
        console.log(chalk.green('‚ïë    4. grupos           - Listar todos os grupos                         ‚ïë'));
        console.log(chalk.green('‚ïë    5. ativar           - Ativar grupo (ex: ativar Fam√≠lia)              ‚ïë'));
        console.log(chalk.green('‚ïë    6. desativar        - Desativar grupo                                ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.white('‚ïë  ü§ñ ENVIOS:                                                              ‚ïë'));
        console.log(chalk.blue('‚ïë    7. verificar        - Verificar novos v√≠deos (apenas novos)          ‚ïë'));
        console.log(chalk.magenta('‚ïë    8. enviar-manual    - Enviar √∫ltimo v√≠deo (for√ßado)                  ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.white('‚ïë  ‚è∞ AUTOMA√á√ÉO (8h, 12h, 18h):                                            ‚ïë'));
        console.log(chalk.blue('‚ïë    9. auto-ativar      - Ativar envios autom√°ticos                      ‚ïë'));
        console.log(chalk.yellow('‚ïë    10. auto-desativar  - Desativar envios autom√°ticos                   ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.white('‚ïë  üõ†Ô∏è  AGENDAMENTO PERSONALIZADO:                                          ‚ïë'));
        console.log(chalk.gray('‚ïë    11. agendar         - Criar agendamento personalizado                ‚ïë'));
        console.log(chalk.gray('‚ïë    12. agendamentos    - Ver todos os agendamentos                      ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.white('‚ïë  üîß FERRAMENTAS:                                                         ‚ïë'));
        console.log(chalk.magenta('‚ïë    13. testar          - Testar busca de v√≠deos                        ‚ïë'));
        console.log(chalk.magenta('‚ïë    14. limpar          - Resetar sess√£o do WhatsApp                    ‚ïë'));
        console.log(chalk.magenta('‚ïë    15. reiniciar       - Reiniciar conex√£o                             ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.white('‚ïë  üì± OUTROS:                                                              ‚ïë'));
        console.log(chalk.gray('‚ïë    cls/clear           - Limpar tela                                    ‚ïë'));
        console.log(chalk.gray('‚ïë    creditos            - Ver cr√©ditos                                   ‚ïë'));
        console.log(chalk.red('‚ïë    0. sair             - Encerrar bot                                   ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
        console.log(chalk.green('\nüí° NOVIDADE: Agendamento autom√°tico para 08h, 12h e 18h!'));
        console.log(chalk.gray('   Use "auto-ativar" para ativar e "enviar-manual" para envio imediato.\n'));
    }

    // Menu de agendamento
    scheduleMenu() {
        console.log(chalk.cyan('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(chalk.cyan('‚ïë                        ‚è∞ MENU DE AGENDAMENTO                            ‚ïë'));
        console.log(chalk.cyan('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.green('‚ïë  üéØ AGENDAMENTO AUTOM√ÅTICO (RECOMENDADO):                               ‚ïë'));
        console.log(chalk.yellow('‚ïë     ‚Ä¢ auto-ativar    - Ativa envios em 08h, 12h e 18h                  ‚ïë'));
        console.log(chalk.yellow('‚ïë     ‚Ä¢ auto-desativar - Desativa envios autom√°ticos                     ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.blue('‚ïë  üõ†Ô∏è  AGENDAMENTO PERSONALIZADO:                                          ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.yellow('‚ïë  üìÖ EXEMPLOS DE HOR√ÅRIOS:                                                ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.green('‚ïë  ‚Ä¢ A cada 30 minutos:    agendar */30 * * * *                           ‚ïë'));
        console.log(chalk.green('‚ïë  ‚Ä¢ A cada hora:          agendar 0 * * * *                              ‚ïë'));
        console.log(chalk.green('‚ïë  ‚Ä¢ 9h e 21h todo dia:    agendar 0 9,21 * * *                          ‚ïë'));
        console.log(chalk.green('‚ïë  ‚Ä¢ 8h segunda a sexta:   agendar 0 8 * * 1-5                           ‚ïë'));
        console.log(chalk.green('‚ïë  ‚Ä¢ Todo domingo √†s 10h:  agendar 0 10 * * 0                            ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.blue('‚ïë  üìù FORMATO: agendar "minuto hora dia m√™s dia_semana"                   ‚ïë'));
        console.log(chalk.gray('‚ïë     * = qualquer valor                                                   ‚ïë'));
        console.log(chalk.gray('‚ïë     0-6 = domingo a s√°bado                                               ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.yellow('‚ïë  üóëÔ∏è  GERENCIAR:                                                          ‚ïë'));
        console.log(chalk.white('‚ïë  ‚Ä¢ Ver ativos:           agendamentos                                   ‚ïë'));
        console.log(chalk.white('‚ïë  ‚Ä¢ Remover:              remover [ID]                                   ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
        
        console.log(chalk.cyan('\nüí° Digite seu comando de agendamento:'));
    }

    // Mostra status detalhado
    showStatus() {
        console.log(chalk.cyan('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(chalk.cyan('‚ïë                           üìä STATUS DO SISTEMA                           ‚ïë'));
        console.log(chalk.cyan('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        
        const connectionStatus = this.isConnected ? 
            chalk.green('üü¢ CONECTADO') : 
            this.isConnecting ? chalk.yellow('üü° CONECTANDO...') : chalk.red('üî¥ DESCONECTADO');
        
        const autoStatus = this.autoScheduleEnabled ? 
            chalk.green('üü¢ ATIVO (8h, 12h, 18h)') : chalk.red('üî¥ DESATIVADO');
        
        const totalGroups = this.groups.size;
        const activeGroups = Array.from(this.groups.values()).filter(g => g.active).length;
        const totalSchedules = this.schedules.size;
        const lastVideo = this.lastVideoId ? this.lastVideoId.substring(0, 15) + '...' : 'Nenhum';
        
        console.log(chalk.white(`‚ïë  üîó Conex√£o WhatsApp:     ${connectionStatus.padEnd(30)} ‚ïë`));
        console.log(chalk.white(`‚ïë  ‚è∞ Envio Autom√°tico:     ${autoStatus.padEnd(30)} ‚ïë`));
        console.log(chalk.white(`‚ïë  üìã Total de Grupos:      ${totalGroups.toString().padEnd(30)} ‚ïë`));
        console.log(chalk.white(`‚ïë  ‚úÖ Grupos Ativos:        ${activeGroups.toString().padEnd(30)} ‚ïë`));
        console.log(chalk.white(`‚ïë  üõ†Ô∏è  Agendamentos Extras:  ${totalSchedules.toString().padEnd(30)} ‚ïë`));
        console.log(chalk.white(`‚ïë  üì∫ √öltimo V√≠deo:         ${lastVideo.padEnd(30)} ‚ïë`));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
        
        if (!this.isConnected && !this.isConnecting) {
            console.log(chalk.yellow('\nüí° Para come√ßar:'));
            console.log(chalk.white('   1. Use "conectar" para conectar ao WhatsApp'));
            console.log(chalk.white('   2. Use "auto-ativar" para ativar envios autom√°ticos'));
            console.log(chalk.white('   3. Use "ativar [nome]" para ativar grupos'));
        }
    }

    // Lista grupos de forma organizada
    listGroups() {
        console.log(chalk.cyan('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(chalk.cyan('‚ïë                           üìã GRUPOS DISPON√çVEIS                          ‚ïë'));
        console.log(chalk.cyan('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£'));
        
        if (this.groups.size === 0) {
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            console.log(chalk.gray('‚ïë                    ‚ö†Ô∏è  Nenhum grupo carregado                           ‚ïë'));
            console.log(chalk.gray('‚ïë                   Use "conectar" primeiro                               ‚ïë'));
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        } else {
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            let index = 1;
            for (const [id, group] of this.groups) {
                const status = group.active ? chalk.green('üü¢ ATIVO  ') : chalk.red('üî¥ INATIVO');
                const groupName = group.name.length > 40 ? group.name.substring(0, 37) + '...' : group.name;
                const line = `‚ïë  ${index.toString().padStart(2)}. ${groupName.padEnd(40)} ${status} ‚ïë`;
                console.log(chalk.white(line));
                index++;
            }
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            console.log(chalk.yellow('‚ïë  üí° Para ativar: ativar [nome do grupo]                                 ‚ïë'));
            console.log(chalk.yellow('‚ïë     Exemplo: ativar Fam√≠lia                                             ‚ïë'));
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        }
        
        console.log(chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
    }

    // Ativa grupo com melhor interface
    activateGroup(groupName) {
        if (!groupName) {
            console.log(chalk.red('‚ùå Voc√™ precisa informar o nome do grupo!'));
            console.log(chalk.yellow('üí° Exemplo: ativar Fam√≠lia'));
            return;
        }

        const group = Array.from(this.groups.entries()).find(([id, data]) => 
            data.name.toLowerCase().includes(groupName.toLowerCase())
        );
        
        if (group) {
            if (group[1].active) {
                console.log(chalk.yellow(`‚ö†Ô∏è O grupo "${group[1].name}" j√° est√° ativo!`));
            } else {
                group[1].active = true;
                console.log(chalk.green(`‚úÖ SUCESSO!`));
                console.log(chalk.green(`üìã Grupo "${group[1].name}" foi ATIVADO!`));
                console.log(chalk.gray(`ü§ñ Agora este grupo receber√° os novos v√≠deos automaticamente.`));
                this.saveData();
            }
        } else {
            console.log(chalk.red('‚ùå Grupo n√£o encontrado!'));
            console.log(chalk.yellow('üí° Use "grupos" para ver todos os grupos dispon√≠veis.'));
        }
    }

    // Desativa grupo com melhor interface
    deactivateGroup(groupName) {
        if (!groupName) {
            console.log(chalk.red('‚ùå Voc√™ precisa informar o nome do grupo!'));
            console.log(chalk.yellow('üí° Exemplo: desativar Fam√≠lia'));
            return;
        }

        const group = Array.from(this.groups.entries()).find(([id, data]) => 
            data.name.toLowerCase().includes(groupName.toLowerCase())
        );
        
        if (group) {
            if (!group[1].active) {
                console.log(chalk.yellow(`‚ö†Ô∏è O grupo "${group[1].name}" j√° est√° inativo!`));
            } else {
                group[1].active = false;
                console.log(chalk.yellow(`üî¥ Grupo "${group[1].name}" foi DESATIVADO!`));
                console.log(chalk.gray(`ü§ñ Este grupo n√£o receber√° mais os v√≠deos automaticamente.`));
                this.saveData();
            }
        } else {
            console.log(chalk.red('‚ùå Grupo n√£o encontrado!'));
            console.log(chalk.yellow('üí° Use "grupos" para ver todos os grupos dispon√≠veis.'));
        }
    }

    // Agenda mensagens com interface melhorada
    scheduleMessage(args) {
        if (args.length === 0) {
            this.scheduleMenu();
            return;
        }

        const cronExpr = args.join(' ').replace(/"/g, '');
        const scheduleId = Date.now().toString();

        try {
            // Valida a express√£o cron
            const task = cron.schedule(cronExpr, () => {
                console.log(chalk.blue('\n‚è∞ VERIFICA√á√ÉO AUTOM√ÅTICA PERSONALIZADA'));
                console.log(chalk.gray('üìÖ ' + new Date().toLocaleString()));
                this.checkAndSendNewVideos();
            }, {
                scheduled: false
            });

            this.schedules.set(scheduleId, {
                cron: cronExpr,
                task: task,
                created: new Date().toISOString(),
                type: 'custom',
                description: `Agendamento personalizado: ${cronExpr}`
            });

            task.start();
            this.saveData();

            console.log(chalk.green('‚úÖ AGENDAMENTO PERSONALIZADO CRIADO!'));
            console.log(chalk.white(`üÜî ID: ${scheduleId}`));
            console.log(chalk.white(`‚è∞ Hor√°rio: ${cronExpr}`));
            console.log(chalk.green('ü§ñ O bot verificar√° automaticamente novos v√≠deos neste hor√°rio!'));
        } catch (error) {
            console.log(chalk.red('‚ùå ERRO: Express√£o de hor√°rio inv√°lida!'));
            console.log(chalk.yellow('üí° Use "agendar" sem par√¢metros para ver exemplos.'));
        }
    }

    // Lista agendamentos com interface melhorada
    listSchedules() {
        console.log(chalk.cyan('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(chalk.cyan('‚ïë                        üìÖ AGENDAMENTOS ATIVOS                            ‚ïë'));
        console.log(chalk.cyan('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£'));
        
        if (this.schedules.size === 0) {
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            console.log(chalk.gray('‚ïë                   ‚ö†Ô∏è  Nenhum agendamento ativo                          ‚ïë'));
            console.log(chalk.gray('‚ïë                Use "auto-ativar" ou "agendar"                          ‚ïë'));
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        } else {
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            
            // Mostra status do agendamento autom√°tico
            if (this.autoScheduleEnabled) {
                console.log(chalk.green('‚ïë  üéØ AGENDAMENTO AUTOM√ÅTICO: ATIVO                                       ‚ïë'));
                console.log(chalk.yellow('‚ïë     ‚Ä¢ 08:00 - Verifica√ß√£o matinal                                       ‚ïë'));
                console.log(chalk.yellow('‚ïë     ‚Ä¢ 12:00 - Verifica√ß√£o do meio-dia                                   ‚ïë'));
                console.log(chalk.yellow('‚ïë     ‚Ä¢ 18:00 - Verifica√ß√£o noturna                                       ‚ïë'));
                console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            }
            
            // Mostra agendamentos personalizados
            const customSchedules = Array.from(this.schedules.entries()).filter(([id, schedule]) => 
                schedule.type === 'custom' || schedule.type === 'manual'
            );
            
            if (customSchedules.length > 0) {
                console.log(chalk.blue('‚ïë  üõ†Ô∏è  AGENDAMENTOS PERSONALIZADOS:                                        ‚ïë'));
                console.log(chalk.white('‚ïë                                                                          ‚ïë'));
                
                let index = 1;
                for (const [id, schedule] of customSchedules) {
                    const createdDate = new Date(schedule.created).toLocaleDateString();
                    const idShort = id.substring(0, 10) + '...';
                    
                    console.log(chalk.white(`‚ïë  ${index}. ID: ${idShort.padEnd(15)} ‚ïë`));
                    console.log(chalk.gray(`‚ïë     ‚è∞ Hor√°rio: ${schedule.cron.padEnd(20)} ‚ïë`));
                    console.log(chalk.gray(`‚ïë     üìÖ Criado: ${createdDate.padEnd(15)} ‚ïë`));
                    console.log(chalk.white('‚ïë                                                                          ‚ïë'));
                    index++;
                }
                console.log(chalk.yellow('‚ïë  üí° Para remover: remover [ID completo]                                  ‚ïë'));
                console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            }
        }
        
        console.log(chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
    }

    // Remove agendamento
    removeSchedule(id) {
        if (!id) {
            console.log(chalk.red('‚ùå Voc√™ precisa informar o ID do agendamento!'));
            console.log(chalk.yellow('üí° Use "agendamentos" para ver os IDs dispon√≠veis.'));
            return;
        }

        // N√£o permite remover agendamentos autom√°ticos
        if (id.startsWith('auto_')) {
            console.log(chalk.red('‚ùå N√£o √© poss√≠vel remover agendamentos autom√°ticos!'));
            console.log(chalk.yellow('üí° Use "auto-desativar" para desativar os envios autom√°ticos.'));
            return;
        }

        const schedule = this.schedules.get(id);
        if (schedule) {
            schedule.task.stop();
            this.schedules.delete(id);
            this.saveData();
            console.log(chalk.green(`‚úÖ Agendamento ${id.substring(0, 10)}... removido com sucesso!`));
        } else {
            console.log(chalk.red('‚ùå Agendamento n√£o encontrado!'));
            console.log(chalk.yellow('üí° Verifique o ID com o comando "agendamentos".'));
        }
    }

    // Testa busca de v√≠deo com interface melhorada
    async testVideo() {
        console.log(chalk.blue('\nüß™ TESTANDO CONEX√ÉO COM YOUTUBE...'));
        console.log(chalk.gray('Buscando o √∫ltimo v√≠deo do canal do PR Marcelo Oliveira...\n'));
        
        const videoData = await this.getLatestVideo();
        
        if (videoData) {
            console.log(chalk.green('‚úÖ SUCESSO! V√≠deo encontrado:\n'));
            console.log(chalk.cyan('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
            console.log(chalk.cyan('‚ïë                            üì∫ DADOS DO V√çDEO                            ‚ïë'));
            console.log(chalk.cyan('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£'));
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            
            // Quebra o t√≠tulo em linhas se for muito grande
            const titleLines = this.wrapText(videoData.title, 64);
            titleLines.forEach((line, index) => {
                const label = index === 0 ? 'üé¨ T√≠tulo: ' : '          ';
                console.log(chalk.white(`‚ïë  ${label}${line.padEnd(64 - label.length)} ‚ïë`));
            });
            
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            console.log(chalk.white(`‚ïë  üîó Link: ${videoData.link.padEnd(55)} ‚ïë`));
            console.log(chalk.white(`‚ïë  üÜî ID: ${videoData.videoId.padEnd(57)} ‚ïë`));
            
            const isNewText = videoData.isNew ? '‚úÖ SIM (ser√° enviado)' : '‚ùå N√ÉO (j√° foi enviado)';
            console.log(chalk.white(`‚ïë  üÜï Novo: ${isNewText.padEnd(55)} ‚ïë`));
            
            console.log(chalk.white('‚ïë                                                                          ‚ïë'));
            console.log(chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
            
            if (videoData.isNew) {
                console.log(chalk.green('\nüéâ Este v√≠deo ser√° enviado na pr√≥xima execu√ß√£o!'));
            } else {
                console.log(chalk.yellow('\n‚ö†Ô∏è Este v√≠deo j√° foi enviado anteriormente.'));
                console.log(chalk.blue('üí° Use "enviar-manual" para reenviar mesmo assim.'));
            }
        } else {
            console.log(chalk.red('‚ùå ERRO! N√£o foi poss√≠vel buscar v√≠deos.'));
            console.log(chalk.yellow('üí° Verifique sua conex√£o com a internet ou a API do YouTube.'));
        }
    }

    // Quebra texto em linhas
    wrapText(text, maxLength) {
        const words = text.split(' ');
        const lines = [];
        let currentLine = '';
        
        words.forEach(word => {
            if ((currentLine + word).length <= maxLength) {
                currentLine += (currentLine ? ' ' : '') + word;
            } else {
                if (currentLine) lines.push(currentLine);
                currentLine = word;
            }
        });
        
        if (currentLine) lines.push(currentLine);
        return lines;
    }

    // Limpa sess√£o com confirma√ß√£o
    cleanSession() {
        console.log(chalk.yellow('\n‚ö†Ô∏è  ATEN√á√ÉO!'));
        console.log(chalk.yellow('Esta a√ß√£o ir√° resetar completamente a sess√£o do WhatsApp.'));
        console.log(chalk.yellow('Voc√™ precisar√° escanear o QR Code novamente.'));
        
        this.rl.question(chalk.cyan('\n‚ùì Tem certeza? (s/N): '), (answer) => {
            if (answer.toLowerCase() === 's' || answer.toLowerCase() === 'sim') {
                console.log(chalk.blue('\nüßπ Limpando sess√£o...'));
                
                if (this.client) {
                    this.disconnect();
                }
                
                const sessionDir = './.wwebjs_auth';
                if (fs.existsSync(sessionDir)) {
                    fs.rmSync(sessionDir, { recursive: true, force: true });
                    console.log(chalk.green('‚úÖ Sess√£o removida com sucesso!'));
                    console.log(chalk.yellow('üí° Use "conectar" para criar uma nova sess√£o.'));
                } else {
                    console.log(chalk.gray('‚ÑπÔ∏è  Nenhuma sess√£o encontrada para limpar.'));
                }
            } else {
                console.log(chalk.gray('‚ùå Opera√ß√£o cancelada.'));
            }
            this.showPrompt();
        });
        return;
    }

    // Mostra cr√©ditos
    showCredits() {
        console.log(chalk.cyan('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(chalk.cyan('‚ïë                              üë®‚Äçüíª CR√âDITOS                                 ‚ïë'));
        console.log(chalk.cyan('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.yellow('‚ïë                        üéØ WALLYSSON STUDIO DV                            ‚ïë'));
        console.log(chalk.yellow('‚ïë                              ¬© 2025                                     ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.green('‚ïë  üöÄ Disparador Canal PR Marcelo Oliveira - Vers√£o 2.1                  ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.blue('‚ïë  üìß Desenvolvido com dedica√ß√£o para automa√ß√£o                           ‚ïë'));
        console.log(chalk.blue('‚ïë     de conte√∫do do Pastor Marcelo Oliveira                              ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.magenta('‚ïë  üõ†Ô∏è  Tecnologias utilizadas:                                            ‚ïë'));
        console.log(chalk.gray('‚ïë     ‚Ä¢ Node.js                                                            ‚ïë'));
        console.log(chalk.gray('‚ïë     ‚Ä¢ whatsapp-web.js                                                    ‚ïë'));
        console.log(chalk.gray('‚ïë     ‚Ä¢ YouTube API v3                                                     ‚ïë'));
        console.log(chalk.gray('‚ïë     ‚Ä¢ Node Cron                                                          ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.red('‚ïë  ‚ù§Ô∏è  Feito com amor e c√≥digo limpo!                                      ‚ïë'));
        console.log(chalk.white('‚ïë                                                                          ‚ïë'));
        console.log(chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
    }

    // Limpa tela de forma organizada
    clearScreen() {
        console.clear();
        this.showWelcome();
    }

    // Desconecta com interface melhorada
    disconnect() {
        if (this.client) {
            this.client.destroy();
        }
        this.isConnected = false;
        this.isConnecting = false;
        console.log(chalk.yellow('\nüö™ Desconectado do WhatsApp com sucesso!'));
        console.log(chalk.gray('üí° Use "conectar" para reconectar.'));
    }

    // Reinicia conex√£o com interface melhorada
    async restart() {
        console.log(chalk.blue('\nüîÑ REINICIANDO CONEX√ÉO...'));
        console.log(chalk.gray('1/3 Desconectando...'));
        this.disconnect();
        
        console.log(chalk.gray('2/3 Aguardando 3 segundos...'));
        await this.delay(3000);
        
        console.log(chalk.gray('3/3 Reinicializando cliente...'));
        this.initializeClient();
        await this.connect();
        
        console.log(chalk.green('‚úÖ Reinicializa√ß√£o conclu√≠da!'));
    }

    // Mostra prompt personalizado
    showPrompt() {
        const statusIcon = this.isConnected ? 'üü¢' : this.isConnecting ? 'üü°' : 'üî¥';
        const autoIcon = this.autoScheduleEnabled ? '‚è∞' : '‚è∏Ô∏è';
        process.stdout.write(chalk.cyan(`\n${statusIcon}${autoIcon} Disparador> `));
    }

    // Sair com confirma√ß√£o
    exit() {
        console.log(chalk.yellow('\nüëã Encerrando Disparador Canal PR Marcelo Oliveira...'));
        
        console.log(chalk.blue('üîÑ Salvando configura√ß√µes...'));
        this.saveData();
        
        console.log(chalk.blue('‚è∞ Parando agendamentos...'));
        for (const [id, schedule] of this.schedules) {
            if (schedule.task) {
                schedule.task.stop();
            }
        }
        
        console.log(chalk.blue('üö™ Desconectando do WhatsApp...'));
        this.disconnect();
        
        console.log(chalk.green('\n‚úÖ Disparador encerrado com sucesso!'));
        console.log(chalk.yellow('üéØ Obrigado por usar Wallysson Studio DV 2025!'));
        console.log(chalk.gray('‚ù§Ô∏è  At√© a pr√≥xima!\n'));
        
        process.exit(0);
    }
}

// Fun√ß√£o principal de inicializa√ß√£o
function initializeBot() {
    console.log(chalk.green('üöÄ Iniciando Disparador Canal PR Marcelo Oliveira...'));
    console.log(chalk.gray('üì¶ Carregando m√≥dulos...'));
    
    const bot = new YouTubeWhatsAppBot();
    
    // Captura Ctrl+C para sair graciosamente
    process.on('SIGINT', () => {
        console.log(chalk.yellow('\n\n‚ö†Ô∏è  Interrup√ß√£o detectada!'));
        bot.exit();
    });
    
    // Captura erros n√£o tratados
    process.on('unhandledRejection', (reason, promise) => {
        console.log(chalk.red('‚ùå Erro n√£o tratado:'), reason);
    });
    
    process.on('uncaughtException', (error) => {
        console.log(chalk.red('‚ùå Exce√ß√£o n√£o capturada:'), error.message);
    });
    
    return bot;
}

// Inicia o bot
const bot = initializeBot();

module.exports = YouTubeWhatsAppBot;